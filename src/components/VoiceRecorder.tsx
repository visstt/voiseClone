import { useState, useRef, useEffect, useCallback } from "react";
import WaveSurfer from "wavesurfer.js";
import "./VoiceRecorder.css";
import {
  useUploadAudio,
  useAudioStatus,
  useChatResponses,
  useAudioPlayer,
  useAudioVisualization,
} from "../hooks";

interface VoiceRecorderProps {
  onAudioRecorded: (audio: Blob) => void;
  onVoiceCloned: (success: boolean, voiceId?: string) => void;
}

const VoiceRecorder: React.FC<VoiceRecorderProps> = ({
  onAudioRecorded,
  onVoiceCloned,
}) => {
  const [isRecording, setIsRecording] = useState(false);
  const [audioURL, setAudioURL] = useState<string | null>(null);
  const [recordingTime, setRecordingTime] = useState(0);
  const [showChatSection, setShowChatSection] = useState(false);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ö—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
  const { uploadAudio, isUploading, error: uploadError } = useUploadAudio();
  const {
    pollAudioStatus,
    isProcessing,
    error: processingError,
  } = useAudioStatus();
  const {
    loadChatResponses,
    setLoadingState,
    isLoadingResponses,
    chatResponses,
    error: chatError,
  } = useChatResponses();
  const {
    playChatResponse,
    currentlyPlaying,
    error: playerError,
  } = useAudioPlayer();

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
  const error =
    uploadError || processingError || chatError || playerError || null;

  const waveformRef = useRef<HTMLDivElement>(null);
  const realtimeCanvasRef = useRef<HTMLCanvasElement>(null);
  const wavesurferRef = useRef<WaveSurfer | null>(null);
  const timerRef = useRef<number | null>(null);

  // Callback –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
  const handleRecordingStop = useCallback(
    (audioBlob: Blob) => {
      const url = URL.createObjectURL(audioBlob);
      setAudioURL(url);
      onAudioRecorded(audioBlob);
    },
    [onAudioRecorded]
  );

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—É–¥–∏–æ
  const { startVisualization, stopVisualization } = useAudioVisualization({
    canvasRef: realtimeCanvasRef,
    onRecordingStop: handleRecordingStop,
  });

  useEffect(() => {
    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, []);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ canvas —Ä–∞–∑–º–µ—Ä–æ–≤
  useEffect(() => {
    if (realtimeCanvasRef.current) {
      const canvas = realtimeCanvasRef.current;
      const rect = canvas.getBoundingClientRect();
      canvas.width = rect.width;
      canvas.height = rect.height;
    }
  }, []);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WaveSurfer –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
    if (waveformRef.current && audioURL) {
      if (wavesurferRef.current) {
        wavesurferRef.current.destroy();
      }

      wavesurferRef.current = WaveSurfer.create({
        container: waveformRef.current,
        waveColor: "#4F46E5",
        progressColor: "#7C3AED",
        cursorColor: "#EC4899",
        barWidth: 3,
        barRadius: 3,
        height: 80,
        normalize: true,
      });

      wavesurferRef.current.load(audioURL);
    }

    return () => {
      if (wavesurferRef.current) {
        wavesurferRef.current.destroy();
      }
    };
  }, [audioURL]);

  const startRecording = async () => {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ —Ö—É–∫
      const initialized = await startVisualization();
      if (!initialized) {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é");
        return;
      }

      setIsRecording(true);
      setRecordingTime(0);

      // –¢–∞–π–º–µ—Ä –∑–∞–ø–∏—Å–∏ (–º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥)
      timerRef.current = setInterval(() => {
        setRecordingTime((prev) => {
          if (prev >= 60) {
            stopRecording();
            return 60;
          }
          return prev + 1;
        });
      }, 1000);
    } catch (error) {
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É: " + error);
    }
  };

  const stopRecording = () => {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ö—É–∫
    stopVisualization();

    setIsRecording(false);

    if (timerRef.current) {
      clearInterval(timerRef.current);
      timerRef.current = null;
    }
  };

  const playRecording = () => {
    if (wavesurferRef.current) {
      wavesurferRef.current.play();
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ WAV –≤ MP3
  const convertToMp3 = async (audioBlob: Blob): Promise<Blob> => {
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º WAV —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∫–∞–∫ lamejs –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    return audioBlob;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  const handleUploadAudio = async () => {
    if (!audioURL || isUploading || isProcessing || isLoadingResponses) {
      return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏
    }

    try {
      setShowChatSection(true); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é —á–∞—Ç–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
      setLoadingState(true); // –í–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–∞–∑—É

      // –ü–æ–ª—É—á–∞–µ–º blob –∏–∑ URL
      const response = await fetch(audioURL);
      const audioBlob = await response.blob();

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP3 (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π blob)
      const mp3Blob = await convertToMp3(audioBlob);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É—è —Ö—É–∫
      const audioId = await uploadAudio(mp3Blob);

      if (audioId) {
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Å callback –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        pollAudioStatus(audioId, (data) => {
          onVoiceCloned(true, data.voiceId);
          loadChatResponses(data.voiceId);
        });
      } else {
        // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        setLoadingState(false);
      }
    } catch (err) {
      console.error("Upload error:", err);
      setLoadingState(false);
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, "0")}`;
  };

  return (
    <div className="voice-recorder">
      <div className="app-main">
        <div className="recording-interface">
          <div className="record-button-wrapper">
            <button
              className={`record-button ${isRecording ? "recording" : ""}`}
              onClick={isRecording ? stopRecording : startRecording}
            >
              üéôÔ∏è
            </button>
            <p className="record-status">
              {isRecording ? "–ó–∞–ø–∏—Å—å..." : "–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å"}
            </p>
          </div>

          <div
            className={`audio-visualizer ${isRecording ? "visible" : "hidden"}`}
          >
            <canvas
              ref={realtimeCanvasRef}
              className="realtime-waveform"
              width={800}
              height={120}
              style={{
                width: "100%",
                height: "120px",
                backgroundColor: "#141414",
                borderRadius: "8px",
                border: "1px solid #333",
              }}
            />
            {isRecording && (
              <div className="recording-timer">
                {formatTime(recordingTime)} / 1:00
              </div>
            )}
          </div>
        </div>

        {audioURL && !isRecording && (
          <div className="audio-result">
            <div className="result-info">
              <p>–ê—É–¥–∏–æ –∑–∞–ø–∏—Å–∞–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é</p>
              {error && (
                <div
                  className="error-message"
                  style={{ color: "#ff6b6b", marginTop: "10px" }}
                >
                  –û—à–∏–±–∫–∞: {error}
                </div>
              )}
            </div>

            <div className="result-actions">
              <button onClick={playRecording} className="action-button primary">
                ‚ñ∂Ô∏è –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –∑–∞–ø–∏—Å—å
              </button>

              <button
                onClick={handleUploadAudio}
                className="action-button secondary"
                disabled={isUploading || isProcessing || isLoadingResponses}
              >
                {isUploading
                  ? "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞..."
                  : isProcessing
                  ? "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞..."
                  : isLoadingResponses
                  ? "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤..."
                  : "üöÄ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å"}
              </button>
            </div>

            <div className="waveform-container">
              <div ref={waveformRef} className="waveform"></div>
            </div>
          </div>
        )}

        {showChatSection && (
          <div className="chat-responses">
            <div className="responses-header">
              <h3>üí¨ –ß–∞—Ç —Å –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–≤—ã–º –¥–≤–æ–π–Ω–∏–∫–æ–º</h3>
              {isLoadingResponses ? (
                <div className="loading-container">
                  <div className="loading-spinner"></div>
                  <p className="loading-text">
                    üéôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤...
                  </p>
                  <p className="loading-subtext">–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 25 —Å–µ–∫—É–Ω–¥</p>
                </div>
              ) : chatResponses.length > 0 ? (
                <p className="chat-description">
                  üéØ –í–∞—à –≥–æ–ª–æ—Å –≥–æ—Ç–æ–≤! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –æ—Ç–≤–µ—Ç
                  –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–≤–æ–π–Ω–∏–∫–∞
                </p>
              ) : (
                <p className="chat-description">
                  ‚è≥ –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≥–æ—Ç–æ–≤—è—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                  —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.
                </p>
              )}
            </div>

            {chatResponses.length > 0 ? (
              <div className="responses-grid">
                {chatResponses.map((response) => (
                  <div key={response.id} className="response-item">
                    <div className="response-content">
                      <div className="response-question">
                        <span className="question-icon">üí≠</span>
                        <h4>{response.question}</h4>
                      </div>

                      <button
                        onClick={() =>
                          playChatResponse(response.id, response.audioUrl)
                        }
                        className={`response-play-button ${
                          currentlyPlaying === response.id ? "playing" : ""
                        }`}
                      >
                        {currentlyPlaying === response.id ? (
                          <>
                            <span className="play-icon">‚è∏Ô∏è</span>
                            –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                          </>
                        ) : (
                          <>
                            <span className="play-icon">‚ñ∂Ô∏è</span>
                            –ü—Ä–æ—Å–ª—É—à–∞—Ç—å
                          </>
                        )}
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            ) : !isLoadingResponses ? (
              <div className="no-responses">
                <p>
                  –û—Ç–≤–µ—Ç—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑
                  –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.
                </p>
              </div>
            ) : null}
          </div>
        )}
      </div>
    </div>
  );
};

export default VoiceRecorder;
